/*
Each row is expected to be in the following format:
identifier = [concolic_goal, ground_pos, depth, delay, with_trace, file].
*/

cex1 = [ p(a,b), [1], 2, 10, true, 'examples/ex0.pl' ].
cex2 = [ p(a), [1], 2, 10, false, 'examples/ex01.pl' ].
cex3 = [ p(a,_Y), [1], 2, 10, false, 'examples/ex02.pl' ].
cex4 = [ p(s(a),a), [1], 2, 10, false, 'examples/ex02.pl' ].
cex5 = [ p(s(a),a), [], 2, 10, true, 'examples/ex02.pl' ].
cex6 = [ p(s(a),a), [2], 2, 10, true, 'examples/ex02.pl' ].
cex7 = [ nat(0), [1], 2, 10, false, 'examples/ex03.pl' ].
cex8 = [ nat(0), [], 2, 10, false, 'examples/ex03.pl' ].
cex9 = [ generate(empty,_A,_B), [1], 2, 200, true, 'examples/ex07.pl' ].

%boh = [ p(b), [1], 2, 10, true, 'examples/boh.pl' ]. % sort mismatch
ex04a = [ what_to_do_today(sunday,_A,_B), [1], 2, 100, true, 'examples/ex04.pl' ].
ex04b = [ what_to_do_today(monday,_A,_B), [1], 2, 100, true, 'examples/ex04.pl' ].
%ex05 = [ applast([0,1,2],_A,_B), [1], 2, 10, true, 'examples/ex05.pl' ]. % unexpected character []?
%ex06 = [ depth(max(1,2,_A), _B), [1], 2, 10, true, 'examples/ex06.pl' ]. % unexpected character []?
ex08 = [ relative(mary,_A), [1], 2, 10, true, 'examples/ex08.pl' ].
ex09 = [ rp(leaf(5),_A), [1], 2, 100, true, 'examples/ex09.pl' ].
%ex10 = [ transpose([1,2,3],_A), [1], 2, 10, true, 'examples/ex10.pl' ]. % unexpected character []?
ex11 = [ mult(s(0),_A,_B), [1], 2, 10, true, 'examples/ex11.pl' ].
ex12 = [ hanoi(4), [1], 2, 10, true, 'examples/ex12.pl' ].
%ex13 = [ path(0,[a,b]), [1], 2, 10, true, 'examples/ex13.pl' ]. % unexpected character
%ex14 = [ qsort([1,2],_A,_B), [1], 2, 10, true, 'examples/ex14.pl' ]. % unexpected character
%ex15 = [ incList([1,2],1,_B), [1], 2, 10, true, 'examples/ex15.pl' ]. % unexpected character
%ex16 = [ flipflip(tree(leaf(0),5,leaf(0)),_A), [1], 2, 10, true, 'examples/ex16.pl' ].% invalid sorted variable
%ex17 = [ rev([1,2],_A), [1], 2, 10, true, 'examples/ex17.pl' ].% invalid declaration: rev_arg_0 already declared
ex18 = [ ackermann(0,2,_A), [1], 2, 100, true, 'examples/ex18.pl' ].
ex19 = [ fib(0,_A), [1], 2, 100, true, 'examples/ex19.pl' ].
%ex20 = [ pre_order(tree(1,void,void),_A), [1], 2, 10, true, 'examples/ex20.pl' ]. % unexpected character
%ex21 = [ factorial(4,_A), [1], 2, 10, true, 'examples/ex21.pl' ]. % permission_error: =/2
%ex22 = [ factorial(4,_A), [1], 2, 10, true, 'examples/ex22.pl' ]. % permission_error: =/2
%ex23 = [ contains(_A,_B), [1], 2, 10, true, 'examples/ex23.pl' ]. % permission_error: \==/2
%ex24 = [ power(_A,_B,_C,_D), [1], 2, 10, true, 'examples/ex24.pl' ]. % permission_error: integer/1
%ex25 = [ max_length([1,2,3],2,_A), [1], 2, 10, true, 'examples/ex25.pl' ]. % permisson_error: is/2
%ex26 = [ factorial(4,_A), [1], 2, 10, true, 'examples/ex26.pl' ]. % permission_error =/2
%ex27 = [ match(_A,_B), [1], 2, 10, true, 'examples/ex27.pl' ].% permission_error \==/2
%foo = [ foo([1,2,3],3), [1], 2, 10, true, 'examples/foo.pl' ]. % unexpected character

%% SICStus Benchmarks %%

%boyer = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/boyer.pl' ]. % permission_error: atomic/1
%browse = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/browse.pl' ]. % permission_error: !/0
%chat_parser = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/chat_parser.pl' ]. % permission_error: fail/0
%crypt = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/crypt.pl' ]. % permission_error: is/2
%deriv = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/deriv.pl' ]. % permission_error: !/0
%dynamic_unit_clause = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/dynamic_unit_clause.pl' ]. % unexpected character
%fast_mu = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/fast_mu.pl' ]. % permission_error: is/2
%flatten = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/flatten.pl' ]. % type not supported
%itak = [ benchmark(triple(18,12,6),_), [1], 2, 10, true, 'examples/bench/itak.pl' ]. % infinite loop?
%meta_qsort = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/meta_qsort.pl' ]. % permission error: var/1
%mu = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/mu.pl' ]. % permission error: var/1
%nreverse = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/nreverse.pl' ]. % unexpected character
%nreverse_builtin = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/nreverse_builtin.pl' ]. % unexpected character
%poly = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/poly.pl' ]. % permission error: !/0
%primes = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/primes.pl' ]. % permission error: =</2
%prover = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/prover.pl' ]. % permission error: fail/0
%qsort = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/qsort.pl' ]. % permission error: =</2
%queens = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/queens.pl' ]. % permission error: =\=/2
%query = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/query.pl' ]. % permission error: >/2
%reducer = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/reducer.pl' ]. % permission error: !/0
%sendmore = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/sendmore.pl' ]. % permission error: =\=/2
%simple_analyzer = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/simple_analyzer.pl' ]. % permission error: =/2
%tak = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/tak.pl' ]. % permission error: =</2
%unify = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/unify.pl' ]. % permission error: =/2
%zebra = [ benchmark(_,_), [1], 2, 10, true, 'examples/bench/zebra.pl' ]. % permission error: =/2


ex0_clp = [ p(a,b), [1], 2, 10, true, 'examples/ex0_clp.pl' ].