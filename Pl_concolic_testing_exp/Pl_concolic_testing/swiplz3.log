---------------------------------------
swiplz3 I/O logfile
---------------------------------------
Execution started on Tue Jun 16 14:02:19 2020
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 0
pl_mk_solver
	in context_id: int = 0
pl_del_config
pl_mk_term_type
	in context_id: int = 0
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_push
	in context_id: int = 0
pl_mk_term_vars
	in context_id: int = 0
	in var_names: string[] = { "A", "B", "C", "D", "E" }
pl_assert_term_string
	in context_id: int = 0
	in assertion: string = "(assert (and (exists ((A Term)) (= (p B A) (p (s a) b))) (forall ((C Term)) (forall ((A Term)) (not (= (p B A) (p (s C) a))))) (forall ((D Term)) (forall ((E Term)) (forall ((A Term)) (not (= (p B A) (p (f D) (s E)))))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 0
pl_pop
	in context_id: int = 0
pl_push
	in context_id: int = 0
pl_mk_term_vars
	in context_id: int = 0
	in var_names: string[] = { "A", "B", "C", "D", "E" }
pl_assert_term_string
	in context_id: int = 0
	in assertion: string = "(assert (and (exists ((A Term)) (= (p B A) (p (s a) b))) (exists ((C Term)) (exists ((A Term)) (= (p B A) (p (s C) a)))) (forall ((D Term)) (forall ((E Term)) (forall ((A Term)) (not (= (p B A) (p (f D) (s E)))))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 0
pl_print_model
	in context_id: int = 0
	out model: string = "B -> (s a)"
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "A"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "B"
	out var_value: term = s(a)
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "C"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "D"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "E"
	out var_value: term = c
pl_pop
	in context_id: int = 0
pl_push
	in context_id: int = 0
pl_mk_term_vars
	in context_id: int = 0
	in var_names: string[] = { "A", "B", "C", "D", "E" }
pl_assert_term_string
	in context_id: int = 0
	in assertion: string = "(assert (and (exists ((A Term)) (= (p B A) (p (s a) b))) (exists ((C Term)) (exists ((A Term)) (= (p B A) (p (s C) a)))) (exists ((D Term)) (exists ((E Term)) (exists ((A Term)) (= (p B A) (p (f D) (s E))))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 0
pl_pop
	in context_id: int = 0
pl_push
	in context_id: int = 0
pl_mk_term_vars
	in context_id: int = 0
	in var_names: string[] = { "A", "B", "C", "D", "E" }
pl_assert_term_string
	in context_id: int = 0
	in assertion: string = "(assert (and (exists ((A Term)) (= (p B A) (p (s a) b))) (exists ((C Term)) (exists ((D Term)) (exists ((A Term)) (= (p B A) (p (f C) (s D)))))) (forall ((E Term)) (forall ((A Term)) (not (= (p B A) (p (s E) a)))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 0
pl_pop
	in context_id: int = 0
pl_push
	in context_id: int = 0
pl_mk_term_vars
	in context_id: int = 0
	in var_names: string[] = { "A", "B", "C", "D", "E" }
pl_assert_term_string
	in context_id: int = 0
	in assertion: string = "(assert (and (exists ((A Term)) (exists ((B Term)) (= (p C B) (p (s A) a)))) (forall ((B Term)) (not (= (p C B) (p (s a) b)))) (forall ((D Term)) (forall ((E Term)) (forall ((B Term)) (not (= (p C B) (p (f D) (s E)))))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 0
pl_print_model
	in context_id: int = 0
	out model: string = "C -> (s c)"
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "A"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "B"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "C"
	out var_value: term = s(c)
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "D"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "E"
	out var_value: term = c
pl_pop
	in context_id: int = 0
pl_push
	in context_id: int = 0
pl_mk_term_vars
	in context_id: int = 0
	in var_names: string[] = { "A", "B", "C", "D", "E" }
pl_assert_term_string
	in context_id: int = 0
	in assertion: string = "(assert (and (exists ((A Term)) (exists ((B Term)) (= (p C B) (p (s A) a)))) (exists ((D Term)) (exists ((E Term)) (exists ((B Term)) (= (p C B) (p (f D) (s E)))))) (forall ((B Term)) (not (= (p C B) (p (s a) b))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 0
pl_pop
	in context_id: int = 0
pl_push
	in context_id: int = 0
pl_mk_term_vars
	in context_id: int = 0
	in var_names: string[] = { "A", "B", "C", "D", "E" }
pl_assert_term_string
	in context_id: int = 0
	in assertion: string = "(assert (and (exists ((A Term)) (exists ((B Term)) (exists ((C Term)) (= (p D C) (p (f A) (s B)))))) (forall ((C Term)) (not (= (p D C) (p (s a) b)))) (forall ((E Term)) (forall ((C Term)) (not (= (p D C) (p (s E) a)))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 0
pl_print_model
	in context_id: int = 0
	out model: string = "D -> (f c)"
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "A"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "B"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "C"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "D"
	out var_value: term = f(c)
pl_get_model_termvar_eval
	in context_id: int = 0
	in var_name: string = "E"
	out var_value: term = c
pl_pop
	in context_id: int = 0
pl_del_solver
	in context_id: int = 0
pl_del_context
	in context_id: int = 0
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 1
pl_mk_solver
	in context_id: int = 1
pl_del_config
pl_mk_term_type
	in context_id: int = 1
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_del_solver
	in context_id: int = 1
pl_del_context
	in context_id: int = 1
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 2
pl_mk_solver
	in context_id: int = 2
pl_del_config
pl_mk_term_type
	in context_id: int = 2
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_push
	in context_id: int = 2
pl_mk_term_vars
	in context_id: int = 2
	in var_names: string[] = { "A", "B", "C" }
pl_assert_term_string
	in context_id: int = 2
	in assertion: string = "(assert (and (not (= (p (s A) a) (p (s a) b))) (forall ((B Term)) (forall ((C Term)) (not (= (p (s A) a) (p (f B) (s C)))))) (= (q A) (q a)) (not (= (q A) (q b)))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 2
pl_print_model
	in context_id: int = 2
	out model: string = "A -> a"
pl_get_model_termvar_eval
	in context_id: int = 2
	in var_name: string = "A"
	out var_value: term = a
pl_get_model_termvar_eval
	in context_id: int = 2
	in var_name: string = "B"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 2
	in var_name: string = "C"
	out var_value: term = c
pl_pop
	in context_id: int = 2
pl_push
	in context_id: int = 2
pl_mk_term_vars
	in context_id: int = 2
	in var_names: string[] = { "A", "B", "C" }
pl_assert_term_string
	in context_id: int = 2
	in assertion: string = "(assert (and (not (= (p (s A) a) (p (s a) b))) (forall ((B Term)) (forall ((C Term)) (not (= (p (s A) a) (p (f B) (s C)))))) (= (q A) (q a)) (= (q A) (q b))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 2
pl_pop
	in context_id: int = 2
pl_push
	in context_id: int = 2
pl_mk_term_vars
	in context_id: int = 2
	in var_names: string[] = { "A", "B", "C" }
pl_assert_term_string
	in context_id: int = 2
	in assertion: string = "(assert (and (not (= (p (s A) a) (p (s a) b))) (forall ((B Term)) (forall ((C Term)) (not (= (p (s A) a) (p (f B) (s C)))))) (= (q A) (q b)) (not (= (q A) (q a)))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 2
pl_print_model
	in context_id: int = 2
	out model: string = "A -> b"
pl_get_model_termvar_eval
	in context_id: int = 2
	in var_name: string = "A"
	out var_value: term = b
pl_get_model_termvar_eval
	in context_id: int = 2
	in var_name: string = "B"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 2
	in var_name: string = "C"
	out var_value: term = c
pl_pop
	in context_id: int = 2
pl_del_solver
	in context_id: int = 2
pl_del_context
	in context_id: int = 2
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 3
pl_mk_solver
	in context_id: int = 3
pl_del_config
pl_mk_term_type
	in context_id: int = 3
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_push
	in context_id: int = 3
pl_mk_term_vars
	in context_id: int = 3
	in var_names: string[] = { "A", "B", "C" }
pl_assert_term_string
	in context_id: int = 3
	in assertion: string = "(assert (and (forall ((A Term)) (not (= (p (f B) (s A)) (p (s a) b)))) (forall ((C Term)) (forall ((A Term)) (not (= (p (f B) (s A)) (p (s C) a))))) (forall ((A Term)) (not (= (r B A) (r a b)))) (forall ((A Term)) (not (= (r B A) (r c b))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 3
pl_print_model
	in context_id: int = 3
	out model: string = "B -> b"
pl_get_model_termvar_eval
	in context_id: int = 3
	in var_name: string = "A"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 3
	in var_name: string = "B"
	out var_value: term = b
pl_get_model_termvar_eval
	in context_id: int = 3
	in var_name: string = "C"
	out var_value: term = c
pl_pop
	in context_id: int = 3
pl_push
	in context_id: int = 3
pl_mk_term_vars
	in context_id: int = 3
	in var_names: string[] = { "A", "B", "C" }
pl_assert_term_string
	in context_id: int = 3
	in assertion: string = "(assert (and (forall ((A Term)) (not (= (p (f B) (s A)) (p (s a) b)))) (forall ((C Term)) (forall ((A Term)) (not (= (p (f B) (s A)) (p (s C) a))))) (exists ((A Term)) (= (r B A) (r a b))) (forall ((A Term)) (not (= (r B A) (r c b))))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 3
pl_print_model
	in context_id: int = 3
	out model: string = "B -> a"
pl_get_model_termvar_eval
	in context_id: int = 3
	in var_name: string = "A"
	out var_value: term = c
pl_get_model_termvar_eval
	in context_id: int = 3
	in var_name: string = "B"
	out var_value: term = a
pl_get_model_termvar_eval
	in context_id: int = 3
	in var_name: string = "C"
	out var_value: term = c
pl_pop
	in context_id: int = 3
pl_push
	in context_id: int = 3
pl_mk_term_vars
	in context_id: int = 3
	in var_names: string[] = { "A", "B", "C" }
pl_assert_term_string
	in context_id: int = 3
	in assertion: string = "(assert (and (forall ((A Term)) (not (= (p (f B) (s A)) (p (s a) b)))) (forall ((C Term)) (forall ((A Term)) (not (= (p (f B) (s A)) (p (s C) a))))) (exists ((A Term)) (= (r B A) (r a b))) (exists ((A Term)) (= (r B A) (r c b)))))"
	in need_int: bool = false
	in need_lists: bool = false
pl_check
	in context_id: int = 3
pl_pop
	in context_id: int = 3
pl_del_solver
	in context_id: int = 3
pl_del_context
	in context_id: int = 3
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 4
pl_mk_solver
	in context_id: int = 4
pl_del_config
pl_mk_term_type
	in context_id: int = 4
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_del_solver
	in context_id: int = 4
pl_del_context
	in context_id: int = 4
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 5
pl_mk_solver
	in context_id: int = 5
pl_del_config
pl_mk_term_type
	in context_id: int = 5
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_del_solver
	in context_id: int = 5
pl_del_context
	in context_id: int = 5
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 6
pl_mk_solver
	in context_id: int = 6
pl_del_config
pl_mk_term_type
	in context_id: int = 6
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_del_solver
	in context_id: int = 6
pl_del_context
	in context_id: int = 6
pl_mk_config
pl_set_param_value
	in param: string = "model"
	in value: string = "true"
pl_mk_context
	out context_id: int = 7
pl_mk_solver
	in context_id: int = 7
pl_del_config
pl_mk_term_type
	in context_id: int = 7
	in known_terms: term[] = { c/0, b/0, a/0, o/0, f/1, s/1, r/2, q/1, p/2 }
	in need_int: bool = false
	in need_lists: bool = false
pl_del_solver
	in context_id: int = 7
pl_del_context
	in context_id: int = 7
Execution stopped on Tue Jun 16 14:03:34 2020
