(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))
(push)
($declare-consts (A B C D E) Term)
(assert
	(and
		(exists ((A Term))
			(= (p B A) (p (s a) b))
		)
		(forall ((C Term))
			(forall ((A Term))
				(not (= (p B A) (p (s C) a)))
			)
		)
		(forall ((D Term))
			(forall ((E Term))
				(forall ((A Term))
					(not (= (p B A) (p (f D) (s E))))
				)
			)
		)
	)
)
(check-sat)
(pop)
(push)
($declare-consts (A B C D E) Term)
(assert
	(and
		(exists ((A Term))
			(= (p B A) (p (s a) b))
		)
		(exists ((C Term))
			(exists ((A Term))
				(= (p B A) (p (s C) a))
			)
		)
		(forall ((D Term))
			(forall ((E Term))
				(forall ((A Term))
					(not (= (p B A) (p (f D) (s E))))
				)
			)
		)
	)
)
(check-sat)
(get-model)
($eval-model-const A)
($eval-model-const B)
($eval-model-const C)
($eval-model-const D)
($eval-model-const E)
(pop)
(push)
($declare-consts (A B C D E) Term)
(assert
	(and
		(exists ((A Term))
			(= (p B A) (p (s a) b))
		)
		(exists ((C Term))
			(exists ((A Term))
				(= (p B A) (p (s C) a))
			)
		)
		(exists ((D Term))
			(exists ((E Term))
				(exists ((A Term))
					(= (p B A) (p (f D) (s E)))
				)
			)
		)
	)
)
(check-sat)
(pop)
(push)
($declare-consts (A B C D E) Term)
(assert
	(and
		(exists ((A Term))
			(= (p B A) (p (s a) b))
		)
		(exists ((C Term))
			(exists ((D Term))
				(exists ((A Term)) 
					(= (p B A) (p (f C) (s D)))
				)
			)
		)
		(forall ((E Term))
			(forall ((A Term))
				(not (= (p B A) (p (s E) a)))
			)
		)
	)
)
(check-sat)
(pop)
(push)
($declare-consts (A B C D E) Term)
(assert
	(and
		(exists ((A Term))
			(exists ((B Term))
				(= (p C B) (p (s A) a))
			)
		)
		(forall ((B Term))
			(not (= (p C B) (p (s a) b)))
		)
		(forall ((D Term))
			(forall ((E Term))
				(forall ((B Term))
					(not (= (p C B) (p (f D) (s E))))
				)
			)
		)
	)
)
(check-sat)
(get-model)
($eval-model-const A)
($eval-model-const B)
($eval-model-const C)
($eval-model-const D)
($eval-model-const E)
(pop)
(push)
($declare-consts (A B C D E) Term)
(assert
	(and
		(exists ((A Term))
			(exists ((B Term))
				(= (p C B) (p (s A) a))
			)
		)
		(exists ((D Term))
			(exists ((E Term))
				(exists ((B Term))
					(= (p C B) (p (f D) (s E)))
				)
			)
		)
		(forall ((B Term))
			(not (= (p C B) (p (s a) b)))
		)
	)
)
(check-sat)
(pop)
(push)
($declare-consts (A B C D E) Term)
(assert
	(and
		(exists ((A Term))
			(exists ((B Term))
				(exists ((C Term))
					(= (p D C) (p (f A) (s B)))
				)
			)
		)
		(forall ((C Term))
			(not (= (p D C) (p (s a) b)))
		)
		(forall ((E Term))
			(forall ((C Term))
				(not (= (p D C) (p (s E) a)))
			)
		)
	)
)
(check-sat)
(get-model)
($eval-model-const A)
($eval-model-const B)
($eval-model-const C)
($eval-model-const D)
($eval-model-const E)
(pop)

(reset)

(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))

(reset)

(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))
(push)
($declare-consts (A B C) Term)
(assert
	(and
		(not (= (p (s A) a) (p (s a) b)))
		(forall ((B Term))
			(forall ((C Term))
				(not (= (p (s A) a) (p (f B) (s C))))
			)
		)
		(= (q A) (q a))
		(not (= (q A) (q b)))
	)
)
â€©(check-sat)
(get-model)
($eval-model-const A)
($eval-model-const B)
($eval-model-const C)
(pop)
(push)
($declare-consts (A B C) Term)
(assert
	(and
		(not (= (p (s A) a) (p (s a) b)))
		(forall ((B Term))
			(forall ((C Term))
				(not (= (p (s A) a) (p (f B) (s C))))
			)
		) 
		(= (q A) (q a))
		(= (q A) (q b))
	)
)
(check-sat)
(pop)
(push)
($declare-consts (A B C) Term)
(assert
	(and
		(not (= (p (s A) a) (p (s a) b)))
		(forall ((B Term))
			(forall ((C Term))
				(not (= (p (s A) a) (p (f B) (s C))))))
		(= (q A) (q b))
		(not (= (q A) (q a)))
	)
)
(check-sat)
(get-model)
($eval-model-const A)
($eval-model-const B)
($eval-model-const C)
(pop)

(reset)

(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))
(push)
($declare-consts (A B C) Term)
(assert
	(and
		(forall ((A Term))
			(not (= (p (f B) (s A)) (p (s a) b)))
		)
		(forall ((C Term))
			(forall ((A Term))
				(not (= (p (f B) (s A)) (p (s C) a)))
			)
		)
		(forall ((A Term))
			(not (= (r B A) (r a b)))
		)
		(forall ((A Term))
			(not (= (r B A) (r c b)))
		)
	)
)
(check-sat)
(get-model)
($eval-model-const A)
($eval-model-const B)
($eval-model-const C)
(pop)
(push)
($declare-consts (A B C) Term)
(assert
	(and
		(forall ((A Term))
			(not (= (p (f B) (s A)) (p (s a) b)))
		)
		(forall ((C Term))
			(forall ((A Term))
				(not (= (p (f B) (s A)) (p (s C) a)))
			)
		)
		(exists ((A Term))
			(= (r B A) (r a b))
		)
		(forall ((A Term))
			(not (= (r B A) (r c b)))
		)
	)
)
(check-sat)
(get-model)
($eval-model-const A)
($eval-model-const B)
($eval-model-const C)
(pop)
(push)
($declare-consts (A B C) Term)
(assert
	(and
		(forall ((A Term))
			(not (= (p (f B) (s A)) (p (s a) b)))
		)
		(forall ((C Term))
			(forall ((A Term))
				(not (= (p (f B) (s A)) (p (s C) a)))
			)
		)
		(exists ((A Term))
			(= (r B A) (r a b))
		)
		(exists ((A Term))
			(= (r B A) (r c b))
		)
	)
)
(check-sat)
(pop)

(reset)

(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))

(reset)

(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))

(reset)

(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))

(reset)

(declare-datatypes () (
	(Term
		c b a o (f (f_arg_0 Term)) (s (s_arg_0 Term)) (r (r_arg_0 Term) (r_arg_1 Term)) (q (q_arg_0 Term)) (p (p_arg_0 Term) (p_arg_1 Term))
	)
))
